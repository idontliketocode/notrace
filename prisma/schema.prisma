// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?

  // App-specific
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  referralCode   String    @unique @default(cuid())
  referredById   String?
  referredBy     User?     @relation("ReferredBy", fields: [referredById], references: [id])
  referees       User[]    @relation("ReferredBy")
  referrals      Referral[] @relation("UserReferrals")

  accounts       Account[]
  sessions       Session[]
  files          File[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model File {
  id                 String    @id @default(cuid())
  userId             String?
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  originalName       String
  mimeType           String
  sizeBytes          Int
  storageKey         String    @unique
  passwordHash       String?
  note               String?
  maxDownloads       Int?
  downloadCount      Int       @default(0)
  expiresAt          DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  downloads          Download[]

  @@index([expiresAt])
}

model Download {
  id        String   @id @default(cuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([fileId])
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  referredId  String   @unique
  createdAt   DateTime @default(now())

  referrer  User @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
}
